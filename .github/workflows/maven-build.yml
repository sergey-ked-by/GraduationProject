# The name of our workflow. It will be displayed in the "Actions" tab on GitHub.
name: Java CI with Maven and Docker

# The 'on' section defines which repository events will trigger this workflow.
on:
  # Run on pushes to the 'main' branch.
  push:
    branches: [ "main" ]
  # Also run on pull requests targeting the 'main' branch.
  pull_request:
    branches: [ "main" ]

# 'jobs' defines a set of tasks to be executed.
jobs:
  build:
    # 'runs-on' specifies the type of virtual machine our job will run on.
    runs-on: ubuntu-latest

    # 'steps' are a sequence of tasks that will be executed as part of the 'build' job.
    steps:
    # Step 1: Clone your repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set up the Java environment (used for caching Maven dependencies)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Step 3: Build the builder stage and run tests
    # We build only the 'builder' stage from our Dockerfile, which runs `mvn test`.
    - name: Run tests inside Docker
      run: |
        docker build --target builder --tag tms-project-builder .

    # Step 4: Copy Allure results from the Docker container
    # We create a temporary container from the builder image to copy the test results.
    - name: Copy Allure results
      run: |
        mkdir -p ./target
        docker create --name temp_container tms-project-builder
        docker cp temp_container:/app/target/allure-results ./target/
        docker rm temp_container

    # Step 5: Generate and upload Allure Report
    # Now that we have the results, we can generate the report and upload it.
    - name: Generate Allure Report
      if: always()
      run: mvn allure:report

    - name: Upload Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: target/site/allure-maven-plugin

    # Step 6: Log in to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Step 7: Build and push the final Docker image
    # Now we build the final, small image and push it to the registry.
    - name: Build and push final image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:latest